// Copyright (c) 2023 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	api "github.com/eclipse-kanto/update-manager/api"
	types "github.com/eclipse-kanto/update-manager/api/types"
	gomock "github.com/golang/mock/gomock"
)

// MockUpdateAgentHandler is a mock of UpdateAgentHandler interface.
type MockUpdateAgentHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateAgentHandlerMockRecorder
}

// MockUpdateAgentHandlerMockRecorder is the mock recorder for MockUpdateAgentHandler.
type MockUpdateAgentHandlerMockRecorder struct {
	mock *MockUpdateAgentHandler
}

// NewMockUpdateAgentHandler creates a new mock instance.
func NewMockUpdateAgentHandler(ctrl *gomock.Controller) *MockUpdateAgentHandler {
	mock := &MockUpdateAgentHandler{ctrl: ctrl}
	mock.recorder = &MockUpdateAgentHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateAgentHandler) EXPECT() *MockUpdateAgentHandlerMockRecorder {
	return m.recorder
}

// HandleCurrentStateGet mocks base method.
func (m *MockUpdateAgentHandler) HandleCurrentStateGet(arg0 string, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCurrentStateGet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleCurrentStateGet indicates an expected call of HandleCurrentStateGet.
func (mr *MockUpdateAgentHandlerMockRecorder) HandleCurrentStateGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCurrentStateGet", reflect.TypeOf((*MockUpdateAgentHandler)(nil).HandleCurrentStateGet), arg0, arg1)
}

// HandleDesiredState mocks base method.
func (m *MockUpdateAgentHandler) HandleDesiredState(arg0 string, arg1 int64, arg2 *types.DesiredState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDesiredState", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleDesiredState indicates an expected call of HandleDesiredState.
func (mr *MockUpdateAgentHandlerMockRecorder) HandleDesiredState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDesiredState", reflect.TypeOf((*MockUpdateAgentHandler)(nil).HandleDesiredState), arg0, arg1, arg2)
}

// HandleDesiredStateCommand mocks base method.
func (m *MockUpdateAgentHandler) HandleDesiredStateCommand(arg0 string, arg1 int64, arg2 *types.DesiredStateCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDesiredStateCommand", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleDesiredStateCommand indicates an expected call of HandleDesiredStateCommand.
func (mr *MockUpdateAgentHandlerMockRecorder) HandleDesiredStateCommand(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDesiredStateCommand", reflect.TypeOf((*MockUpdateAgentHandler)(nil).HandleDesiredStateCommand), arg0, arg1, arg2)
}

// MockBaseClient is a mock of BaseClient interface.
type MockBaseClient struct {
	ctrl     *gomock.Controller
	recorder *MockBaseClientMockRecorder
}

// MockBaseClientMockRecorder is the mock recorder for MockBaseClient.
type MockBaseClientMockRecorder struct {
	mock *MockBaseClient
}

// NewMockBaseClient creates a new mock instance.
func NewMockBaseClient(ctrl *gomock.Controller) *MockBaseClient {
	mock := &MockBaseClient{ctrl: ctrl}
	mock.recorder = &MockBaseClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseClient) EXPECT() *MockBaseClientMockRecorder {
	return m.recorder
}

// Domain mocks base method.
func (m *MockBaseClient) Domain() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Domain")
	ret0, _ := ret[0].(string)
	return ret0
}

// Domain indicates an expected call of Domain.
func (mr *MockBaseClientMockRecorder) Domain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domain", reflect.TypeOf((*MockBaseClient)(nil).Domain))
}

// Stop mocks base method.
func (m *MockBaseClient) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockBaseClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBaseClient)(nil).Stop))
}

// MockUpdateAgentClient is a mock of UpdateAgentClient interface.
type MockUpdateAgentClient struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateAgentClientMockRecorder
}

// MockUpdateAgentClientMockRecorder is the mock recorder for MockUpdateAgentClient.
type MockUpdateAgentClientMockRecorder struct {
	mock *MockUpdateAgentClient
}

// NewMockUpdateAgentClient creates a new mock instance.
func NewMockUpdateAgentClient(ctrl *gomock.Controller) *MockUpdateAgentClient {
	mock := &MockUpdateAgentClient{ctrl: ctrl}
	mock.recorder = &MockUpdateAgentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateAgentClient) EXPECT() *MockUpdateAgentClientMockRecorder {
	return m.recorder
}

// Domain mocks base method.
func (m *MockUpdateAgentClient) Domain() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Domain")
	ret0, _ := ret[0].(string)
	return ret0
}

// Domain indicates an expected call of Domain.
func (mr *MockUpdateAgentClientMockRecorder) Domain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domain", reflect.TypeOf((*MockUpdateAgentClient)(nil).Domain))
}

// SendCurrentState mocks base method.
func (m *MockUpdateAgentClient) SendCurrentState(arg0 string, arg1 *types.Inventory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCurrentState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCurrentState indicates an expected call of SendCurrentState.
func (mr *MockUpdateAgentClientMockRecorder) SendCurrentState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCurrentState", reflect.TypeOf((*MockUpdateAgentClient)(nil).SendCurrentState), arg0, arg1)
}

// SendDesiredStateFeedback mocks base method.
func (m *MockUpdateAgentClient) SendDesiredStateFeedback(arg0 string, arg1 *types.DesiredStateFeedback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDesiredStateFeedback", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDesiredStateFeedback indicates an expected call of SendDesiredStateFeedback.
func (mr *MockUpdateAgentClientMockRecorder) SendDesiredStateFeedback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDesiredStateFeedback", reflect.TypeOf((*MockUpdateAgentClient)(nil).SendDesiredStateFeedback), arg0, arg1)
}

// Start mocks base method.
func (m *MockUpdateAgentClient) Start(arg0 api.UpdateAgentHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockUpdateAgentClientMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockUpdateAgentClient)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockUpdateAgentClient) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockUpdateAgentClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockUpdateAgentClient)(nil).Stop))
}

// MockStateHandler is a mock of StateHandler interface.
type MockStateHandler struct {
	ctrl     *gomock.Controller
	recorder *MockStateHandlerMockRecorder
}

// MockStateHandlerMockRecorder is the mock recorder for MockStateHandler.
type MockStateHandlerMockRecorder struct {
	mock *MockStateHandler
}

// NewMockStateHandler creates a new mock instance.
func NewMockStateHandler(ctrl *gomock.Controller) *MockStateHandler {
	mock := &MockStateHandler{ctrl: ctrl}
	mock.recorder = &MockStateHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateHandler) EXPECT() *MockStateHandlerMockRecorder {
	return m.recorder
}

// HandleCurrentState mocks base method.
func (m *MockStateHandler) HandleCurrentState(arg0 string, arg1 int64, arg2 *types.Inventory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCurrentState", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleCurrentState indicates an expected call of HandleCurrentState.
func (mr *MockStateHandlerMockRecorder) HandleCurrentState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCurrentState", reflect.TypeOf((*MockStateHandler)(nil).HandleCurrentState), arg0, arg1, arg2)
}

// HandleDesiredStateFeedback mocks base method.
func (m *MockStateHandler) HandleDesiredStateFeedback(arg0 string, arg1 int64, arg2 *types.DesiredStateFeedback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDesiredStateFeedback", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleDesiredStateFeedback indicates an expected call of HandleDesiredStateFeedback.
func (mr *MockStateHandlerMockRecorder) HandleDesiredStateFeedback(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDesiredStateFeedback", reflect.TypeOf((*MockStateHandler)(nil).HandleDesiredStateFeedback), arg0, arg1, arg2)
}

// MockDesiredStateClient is a mock of DesiredStateClient interface.
type MockDesiredStateClient struct {
	ctrl     *gomock.Controller
	recorder *MockDesiredStateClientMockRecorder
}

// MockDesiredStateClientMockRecorder is the mock recorder for MockDesiredStateClient.
type MockDesiredStateClientMockRecorder struct {
	mock *MockDesiredStateClient
}

// NewMockDesiredStateClient creates a new mock instance.
func NewMockDesiredStateClient(ctrl *gomock.Controller) *MockDesiredStateClient {
	mock := &MockDesiredStateClient{ctrl: ctrl}
	mock.recorder = &MockDesiredStateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDesiredStateClient) EXPECT() *MockDesiredStateClientMockRecorder {
	return m.recorder
}

// Domain mocks base method.
func (m *MockDesiredStateClient) Domain() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Domain")
	ret0, _ := ret[0].(string)
	return ret0
}

// Domain indicates an expected call of Domain.
func (mr *MockDesiredStateClientMockRecorder) Domain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domain", reflect.TypeOf((*MockDesiredStateClient)(nil).Domain))
}

// SendCurrentStateGet mocks base method.
func (m *MockDesiredStateClient) SendCurrentStateGet(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCurrentStateGet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCurrentStateGet indicates an expected call of SendCurrentStateGet.
func (mr *MockDesiredStateClientMockRecorder) SendCurrentStateGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCurrentStateGet", reflect.TypeOf((*MockDesiredStateClient)(nil).SendCurrentStateGet), arg0)
}

// SendDesiredState mocks base method.
func (m *MockDesiredStateClient) SendDesiredState(arg0 string, arg1 *types.DesiredState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDesiredState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDesiredState indicates an expected call of SendDesiredState.
func (mr *MockDesiredStateClientMockRecorder) SendDesiredState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDesiredState", reflect.TypeOf((*MockDesiredStateClient)(nil).SendDesiredState), arg0, arg1)
}

// SendDesiredStateCommand mocks base method.
func (m *MockDesiredStateClient) SendDesiredStateCommand(arg0 string, arg1 *types.DesiredStateCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDesiredStateCommand", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDesiredStateCommand indicates an expected call of SendDesiredStateCommand.
func (mr *MockDesiredStateClientMockRecorder) SendDesiredStateCommand(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDesiredStateCommand", reflect.TypeOf((*MockDesiredStateClient)(nil).SendDesiredStateCommand), arg0, arg1)
}

// Start mocks base method.
func (m *MockDesiredStateClient) Start(arg0 api.StateHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockDesiredStateClientMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockDesiredStateClient)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockDesiredStateClient) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockDesiredStateClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDesiredStateClient)(nil).Stop))
}

// MockOwnerConsentAgentHandler is a mock of OwnerConsentAgentHandler interface.
type MockOwnerConsentAgentHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOwnerConsentAgentHandlerMockRecorder
}

// MockOwnerConsentAgentHandlerMockRecorder is the mock recorder for MockOwnerConsentAgentHandler.
type MockOwnerConsentAgentHandlerMockRecorder struct {
	mock *MockOwnerConsentAgentHandler
}

// NewMockOwnerConsentAgentHandler creates a new mock instance.
func NewMockOwnerConsentAgentHandler(ctrl *gomock.Controller) *MockOwnerConsentAgentHandler {
	mock := &MockOwnerConsentAgentHandler{ctrl: ctrl}
	mock.recorder = &MockOwnerConsentAgentHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOwnerConsentAgentHandler) EXPECT() *MockOwnerConsentAgentHandlerMockRecorder {
	return m.recorder
}

// HandleOwnerConsentGet mocks base method.
func (m *MockOwnerConsentAgentHandler) HandleOwnerConsentGet(arg0 string, arg1 int64, arg2 *types.OwnerConsent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleOwnerConsentGet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleOwnerConsentGet indicates an expected call of HandleOwnerConsentGet.
func (mr *MockOwnerConsentAgentHandlerMockRecorder) HandleOwnerConsentGet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleOwnerConsentGet", reflect.TypeOf((*MockOwnerConsentAgentHandler)(nil).HandleOwnerConsentGet), arg0, arg1, arg2)
}

// MockOwnerConsentAgentClient is a mock of OwnerConsentAgentClient interface.
type MockOwnerConsentAgentClient struct {
	ctrl     *gomock.Controller
	recorder *MockOwnerConsentAgentClientMockRecorder
}

// MockOwnerConsentAgentClientMockRecorder is the mock recorder for MockOwnerConsentAgentClient.
type MockOwnerConsentAgentClientMockRecorder struct {
	mock *MockOwnerConsentAgentClient
}

// NewMockOwnerConsentAgentClient creates a new mock instance.
func NewMockOwnerConsentAgentClient(ctrl *gomock.Controller) *MockOwnerConsentAgentClient {
	mock := &MockOwnerConsentAgentClient{ctrl: ctrl}
	mock.recorder = &MockOwnerConsentAgentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOwnerConsentAgentClient) EXPECT() *MockOwnerConsentAgentClientMockRecorder {
	return m.recorder
}

// Domain mocks base method.
func (m *MockOwnerConsentAgentClient) Domain() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Domain")
	ret0, _ := ret[0].(string)
	return ret0
}

// Domain indicates an expected call of Domain.
func (mr *MockOwnerConsentAgentClientMockRecorder) Domain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domain", reflect.TypeOf((*MockOwnerConsentAgentClient)(nil).Domain))
}

// SendOwnerConsent mocks base method.
func (m *MockOwnerConsentAgentClient) SendOwnerConsent(arg0 string, arg1 *types.OwnerConsent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOwnerConsent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOwnerConsent indicates an expected call of SendOwnerConsent.
func (mr *MockOwnerConsentAgentClientMockRecorder) SendOwnerConsent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOwnerConsent", reflect.TypeOf((*MockOwnerConsentAgentClient)(nil).SendOwnerConsent), arg0, arg1)
}

// Start mocks base method.
func (m *MockOwnerConsentAgentClient) Start(arg0 api.OwnerConsentAgentHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockOwnerConsentAgentClientMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockOwnerConsentAgentClient)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockOwnerConsentAgentClient) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockOwnerConsentAgentClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockOwnerConsentAgentClient)(nil).Stop))
}

// MockOwnerConsentHandler is a mock of OwnerConsentHandler interface.
type MockOwnerConsentHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOwnerConsentHandlerMockRecorder
}

// MockOwnerConsentHandlerMockRecorder is the mock recorder for MockOwnerConsentHandler.
type MockOwnerConsentHandlerMockRecorder struct {
	mock *MockOwnerConsentHandler
}

// NewMockOwnerConsentHandler creates a new mock instance.
func NewMockOwnerConsentHandler(ctrl *gomock.Controller) *MockOwnerConsentHandler {
	mock := &MockOwnerConsentHandler{ctrl: ctrl}
	mock.recorder = &MockOwnerConsentHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOwnerConsentHandler) EXPECT() *MockOwnerConsentHandlerMockRecorder {
	return m.recorder
}

// HandleOwnerConsent mocks base method.
func (m *MockOwnerConsentHandler) HandleOwnerConsent(arg0 string, arg1 int64, arg2 *types.OwnerConsent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleOwnerConsent", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleOwnerConsent indicates an expected call of HandleOwnerConsent.
func (mr *MockOwnerConsentHandlerMockRecorder) HandleOwnerConsent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleOwnerConsent", reflect.TypeOf((*MockOwnerConsentHandler)(nil).HandleOwnerConsent), arg0, arg1, arg2)
}

// MockOwnerConsentClient is a mock of OwnerConsentClient interface.
type MockOwnerConsentClient struct {
	ctrl     *gomock.Controller
	recorder *MockOwnerConsentClientMockRecorder
}

// MockOwnerConsentClientMockRecorder is the mock recorder for MockOwnerConsentClient.
type MockOwnerConsentClientMockRecorder struct {
	mock *MockOwnerConsentClient
}

// NewMockOwnerConsentClient creates a new mock instance.
func NewMockOwnerConsentClient(ctrl *gomock.Controller) *MockOwnerConsentClient {
	mock := &MockOwnerConsentClient{ctrl: ctrl}
	mock.recorder = &MockOwnerConsentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOwnerConsentClient) EXPECT() *MockOwnerConsentClientMockRecorder {
	return m.recorder
}

// Domain mocks base method.
func (m *MockOwnerConsentClient) Domain() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Domain")
	ret0, _ := ret[0].(string)
	return ret0
}

// Domain indicates an expected call of Domain.
func (mr *MockOwnerConsentClientMockRecorder) Domain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domain", reflect.TypeOf((*MockOwnerConsentClient)(nil).Domain))
}

// SendOwnerConsentGet mocks base method.
func (m *MockOwnerConsentClient) SendOwnerConsentGet(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOwnerConsentGet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOwnerConsentGet indicates an expected call of SendOwnerConsentGet.
func (mr *MockOwnerConsentClientMockRecorder) SendOwnerConsentGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOwnerConsentGet", reflect.TypeOf((*MockOwnerConsentClient)(nil).SendOwnerConsentGet), arg0)
}

// Start mocks base method.
func (m *MockOwnerConsentClient) Start(arg0 api.OwnerConsentHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockOwnerConsentClientMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockOwnerConsentClient)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockOwnerConsentClient) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockOwnerConsentClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockOwnerConsentClient)(nil).Stop))
}
