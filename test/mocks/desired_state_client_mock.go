// Copyright (c) 2023 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: desired_state_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	api "github.com/eclipse-kanto/update-manager/api"
	gomock "github.com/golang/mock/gomock"
)

// MockDesiredStateClient is a mock of DesiredStateClient interface.
type MockDesiredStateClient struct {
	ctrl     *gomock.Controller
	recorder *MockDesiredStateClientMockRecorder
}

// MockDesiredStateClientMockRecorder is the mock recorder for MockDesiredStateClient.
type MockDesiredStateClientMockRecorder struct {
	mock *MockDesiredStateClient
}

// NewMockDesiredStateClient creates a new mock instance.
func NewMockDesiredStateClient(ctrl *gomock.Controller) *MockDesiredStateClient {
	mock := &MockDesiredStateClient{ctrl: ctrl}
	mock.recorder = &MockDesiredStateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDesiredStateClient) EXPECT() *MockDesiredStateClientMockRecorder {
	return m.recorder
}

// Domain mocks base method.
func (m *MockDesiredStateClient) Domain() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Domain")
	ret0, _ := ret[0].(string)
	return ret0
}

// Domain indicates an expected call of Domain.
func (mr *MockDesiredStateClientMockRecorder) Domain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domain", reflect.TypeOf((*MockDesiredStateClient)(nil).Domain))
}

// PublishDesiredState mocks base method.
func (m *MockDesiredStateClient) PublishDesiredState(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishDesiredState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishDesiredState indicates an expected call of PublishDesiredState.
func (mr *MockDesiredStateClientMockRecorder) PublishDesiredState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishDesiredState", reflect.TypeOf((*MockDesiredStateClient)(nil).PublishDesiredState), arg0)
}

// PublishDesiredStateCommand mocks base method.
func (m *MockDesiredStateClient) PublishDesiredStateCommand(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishDesiredStateCommand", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishDesiredStateCommand indicates an expected call of PublishDesiredStateCommand.
func (mr *MockDesiredStateClientMockRecorder) PublishDesiredStateCommand(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishDesiredStateCommand", reflect.TypeOf((*MockDesiredStateClient)(nil).PublishDesiredStateCommand), arg0)
}

// PublishGetCurrentState mocks base method.
func (m *MockDesiredStateClient) PublishGetCurrentState(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishGetCurrentState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishGetCurrentState indicates an expected call of PublishGetCurrentState.
func (mr *MockDesiredStateClientMockRecorder) PublishGetCurrentState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishGetCurrentState", reflect.TypeOf((*MockDesiredStateClient)(nil).PublishDesiredState), arg0)
}

// Subscribe mocks base method.
func (m *MockDesiredStateClient) Subscribe(arg0 api.StateHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockDesiredStateClientMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockDesiredStateClient)(nil).Subscribe), arg0)
}

// Unsubscribe mocks base method.
func (m *MockDesiredStateClient) Unsubscribe() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe")
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockDesiredStateClientMockRecorder) Unsubscribe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockDesiredStateClient)(nil).Unsubscribe))
}
