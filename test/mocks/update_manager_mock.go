// Copyright (c) 2023 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/update_manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	api "github.com/eclipse-kanto/update-manager/api"
	types "github.com/eclipse-kanto/update-manager/api/types"
	gomock "github.com/golang/mock/gomock"
)

// MockUpdateAgent is a mock of UpdateAgent interface.
type MockUpdateAgent struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateAgentMockRecorder
}

// MockUpdateAgentMockRecorder is the mock recorder for MockUpdateAgent.
type MockUpdateAgentMockRecorder struct {
	mock *MockUpdateAgent
}

// NewMockUpdateAgent creates a new mock instance.
func NewMockUpdateAgent(ctrl *gomock.Controller) *MockUpdateAgent {
	mock := &MockUpdateAgent{ctrl: ctrl}
	mock.recorder = &MockUpdateAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateAgent) EXPECT() *MockUpdateAgentMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockUpdateAgent) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockUpdateAgentMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockUpdateAgent)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockUpdateAgent) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockUpdateAgentMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockUpdateAgent)(nil).Stop))
}

// MockUpdateManager is a mock of UpdateManager interface.
type MockUpdateManager struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateManagerMockRecorder
}

// MockUpdateManagerMockRecorder is the mock recorder for MockUpdateManager.
type MockUpdateManagerMockRecorder struct {
	mock *MockUpdateManager
}

// NewMockUpdateManager creates a new mock instance.
func NewMockUpdateManager(ctrl *gomock.Controller) *MockUpdateManager {
	mock := &MockUpdateManager{ctrl: ctrl}
	mock.recorder = &MockUpdateManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateManager) EXPECT() *MockUpdateManagerMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockUpdateManager) Apply(ctx context.Context, activityID string, desiredState *types.DesiredState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Apply", ctx, activityID, desiredState)
}

// Apply indicates an expected call of Apply.
func (mr *MockUpdateManagerMockRecorder) Apply(ctx, activityID, desiredState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockUpdateManager)(nil).Apply), ctx, activityID, desiredState)
}

// Command mocks base method.
func (m *MockUpdateManager) Command(ctx context.Context, activityID string, command *types.DesiredStateCommand) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Command", ctx, activityID, command)
}

// Command indicates an expected call of Command.
func (mr *MockUpdateManagerMockRecorder) Command(ctx, activityID, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockUpdateManager)(nil).Command), ctx, activityID, command)
}

// Dispose mocks base method.
func (m *MockUpdateManager) Dispose() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispose")
	ret0, _ := ret[0].(error)
	return ret0
}

// Dispose indicates an expected call of Dispose.
func (mr *MockUpdateManagerMockRecorder) Dispose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispose", reflect.TypeOf((*MockUpdateManager)(nil).Dispose))
}

// Get mocks base method.
func (m *MockUpdateManager) Get(ctx context.Context, activityID string) (*types.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, activityID)
	ret0, _ := ret[0].(*types.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUpdateManagerMockRecorder) Get(ctx, activityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUpdateManager)(nil).Get), ctx, activityID)
}

// Name mocks base method.
func (m *MockUpdateManager) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockUpdateManagerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockUpdateManager)(nil).Name))
}

// SetCallback mocks base method.
func (m *MockUpdateManager) SetCallback(callback api.UpdateManagerCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCallback", callback)
}

// SetCallback indicates an expected call of SetCallback.
func (mr *MockUpdateManagerMockRecorder) SetCallback(callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCallback", reflect.TypeOf((*MockUpdateManager)(nil).SetCallback), callback)
}

// WatchEvents mocks base method.
func (m *MockUpdateManager) WatchEvents(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WatchEvents", ctx)
}

// WatchEvents indicates an expected call of WatchEvents.
func (mr *MockUpdateManagerMockRecorder) WatchEvents(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchEvents", reflect.TypeOf((*MockUpdateManager)(nil).WatchEvents), ctx)
}

// MockDesiredStateFeedbackHandler is a mock of DesiredStateFeedbackHandler interface.
type MockDesiredStateFeedbackHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDesiredStateFeedbackHandlerMockRecorder
}

// MockDesiredStateFeedbackHandlerMockRecorder is the mock recorder for MockDesiredStateFeedbackHandler.
type MockDesiredStateFeedbackHandlerMockRecorder struct {
	mock *MockDesiredStateFeedbackHandler
}

// NewMockDesiredStateFeedbackHandler creates a new mock instance.
func NewMockDesiredStateFeedbackHandler(ctrl *gomock.Controller) *MockDesiredStateFeedbackHandler {
	mock := &MockDesiredStateFeedbackHandler{ctrl: ctrl}
	mock.recorder = &MockDesiredStateFeedbackHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDesiredStateFeedbackHandler) EXPECT() *MockDesiredStateFeedbackHandlerMockRecorder {
	return m.recorder
}

// HandleDesiredStateFeedbackEvent mocks base method.
func (m *MockDesiredStateFeedbackHandler) HandleDesiredStateFeedbackEvent(domain, activityID, baseline string, status types.StatusType, message string, actions []*types.Action) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleDesiredStateFeedbackEvent", domain, activityID, baseline, status, message, actions)
}

// HandleDesiredStateFeedbackEvent indicates an expected call of HandleDesiredStateFeedbackEvent.
func (mr *MockDesiredStateFeedbackHandlerMockRecorder) HandleDesiredStateFeedbackEvent(domain, activityID, baseline, status, message, actions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDesiredStateFeedbackEvent", reflect.TypeOf((*MockDesiredStateFeedbackHandler)(nil).HandleDesiredStateFeedbackEvent), domain, activityID, baseline, status, message, actions)
}

// MockCurrentStateHandler is a mock of CurrentStateHandler interface.
type MockCurrentStateHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCurrentStateHandlerMockRecorder
}

// MockCurrentStateHandlerMockRecorder is the mock recorder for MockCurrentStateHandler.
type MockCurrentStateHandlerMockRecorder struct {
	mock *MockCurrentStateHandler
}

// NewMockCurrentStateHandler creates a new mock instance.
func NewMockCurrentStateHandler(ctrl *gomock.Controller) *MockCurrentStateHandler {
	mock := &MockCurrentStateHandler{ctrl: ctrl}
	mock.recorder = &MockCurrentStateHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrentStateHandler) EXPECT() *MockCurrentStateHandlerMockRecorder {
	return m.recorder
}

// HandleCurrentStateEvent mocks base method.
func (m *MockCurrentStateHandler) HandleCurrentStateEvent(domain, activityID string, currentState *types.Inventory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleCurrentStateEvent", domain, activityID, currentState)
}

// HandleCurrentStateEvent indicates an expected call of HandleCurrentStateEvent.
func (mr *MockCurrentStateHandlerMockRecorder) HandleCurrentStateEvent(domain, activityID, currentState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCurrentStateEvent", reflect.TypeOf((*MockCurrentStateHandler)(nil).HandleCurrentStateEvent), domain, activityID, currentState)
}

// MockUpdateManagerCallback is a mock of UpdateManagerCallback interface.
type MockUpdateManagerCallback struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateManagerCallbackMockRecorder
}

// MockUpdateManagerCallbackMockRecorder is the mock recorder for MockUpdateManagerCallback.
type MockUpdateManagerCallbackMockRecorder struct {
	mock *MockUpdateManagerCallback
}

// NewMockUpdateManagerCallback creates a new mock instance.
func NewMockUpdateManagerCallback(ctrl *gomock.Controller) *MockUpdateManagerCallback {
	mock := &MockUpdateManagerCallback{ctrl: ctrl}
	mock.recorder = &MockUpdateManagerCallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateManagerCallback) EXPECT() *MockUpdateManagerCallbackMockRecorder {
	return m.recorder
}

// HandleCurrentStateEvent mocks base method.
func (m *MockUpdateManagerCallback) HandleCurrentStateEvent(domain, activityID string, currentState *types.Inventory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleCurrentStateEvent", domain, activityID, currentState)
}

// HandleCurrentStateEvent indicates an expected call of HandleCurrentStateEvent.
func (mr *MockUpdateManagerCallbackMockRecorder) HandleCurrentStateEvent(domain, activityID, currentState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCurrentStateEvent", reflect.TypeOf((*MockUpdateManagerCallback)(nil).HandleCurrentStateEvent), domain, activityID, currentState)
}

// HandleDesiredStateFeedbackEvent mocks base method.
func (m *MockUpdateManagerCallback) HandleDesiredStateFeedbackEvent(domain, activityID, baseline string, status types.StatusType, message string, actions []*types.Action) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleDesiredStateFeedbackEvent", domain, activityID, baseline, status, message, actions)
}

// HandleDesiredStateFeedbackEvent indicates an expected call of HandleDesiredStateFeedbackEvent.
func (mr *MockUpdateManagerCallbackMockRecorder) HandleDesiredStateFeedbackEvent(domain, activityID, baseline, status, message, actions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDesiredStateFeedbackEvent", reflect.TypeOf((*MockUpdateManagerCallback)(nil).HandleDesiredStateFeedbackEvent), domain, activityID, baseline, status, message, actions)
}
