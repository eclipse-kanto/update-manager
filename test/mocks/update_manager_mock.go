// Copyright (c) 2023 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: update_manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	api "github.com/eclipse-kanto/update-manager/api"
	types "github.com/eclipse-kanto/update-manager/api/types"
	gomock "github.com/golang/mock/gomock"
)

// MockUpdateManager is a mock of UpdateManager interface.
type MockUpdateManager struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateManagerMockRecorder
}

// MockUpdateManagerMockRecorder is the mock recorder for MockUpdateManager.
type MockUpdateManagerMockRecorder struct {
	mock *MockUpdateManager
}

// NewMockUpdateManager creates a new mock instance.
func NewMockUpdateManager(ctrl *gomock.Controller) *MockUpdateManager {
	mock := &MockUpdateManager{ctrl: ctrl}
	mock.recorder = &MockUpdateManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateManager) EXPECT() *MockUpdateManagerMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockUpdateManager) Apply(ctx context.Context, activityID string, desiredState *types.DesiredState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Apply", ctx, activityID, desiredState)
}

// Apply indicates an expected call of Apply.
func (mr *MockUpdateManagerMockRecorder) Apply(ctx, activityID, desiredState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockUpdateManager)(nil).Apply), ctx, activityID, desiredState)
}

// Command mocks base method.
func (m *MockUpdateManager) Command(ctx context.Context, activityID string, desiredStateCommand *types.DesiredStateCommand) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Command", ctx, activityID, desiredStateCommand)
}

// Command indicates an expected call of Command.
func (mr *MockUpdateManagerMockRecorder) Command(ctx, activityID, desiredStateCommand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockUpdateManager)(nil).Command), ctx, activityID, desiredStateCommand)
}

// Dispose mocks base method.
func (m *MockUpdateManager) Dispose() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispose")
	ret0, _ := ret[0].(error)
	return ret0
}

// Dispose indicates an expected call of Dispose.
func (mr *MockUpdateManagerMockRecorder) Dispose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispose", reflect.TypeOf((*MockUpdateManager)(nil).Dispose))
}

// Get mocks base method.
func (m *MockUpdateManager) Get(ctx context.Context, activityID string) (*types.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, activityID)
	ret0, _ := ret[0].(*types.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUpdateManagerMockRecorder) Get(ctx context.Context, activityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUpdateManager)(nil).Get), ctx, activityID)
}

// Name mocks base method.
func (m *MockUpdateManager) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockUpdateManagerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockUpdateManager)(nil).Name))
}

// SetCallback mocks base method.
func (m *MockUpdateManager) SetCallback(callback api.UpdateManagerCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCallback", callback)
}

// SetCallback indicates an expected call of SetCallback.
func (mr *MockUpdateManagerMockRecorder) SetCallback(callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCallback", reflect.TypeOf((*MockUpdateManager)(nil).SetCallback), callback)
}

// WatchEvents mocks base method.
func (m *MockUpdateManager) WatchEvents(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WatchEvents", ctx)
}

// WatchEvents indicates an expected call of WatchEvents.
func (mr *MockUpdateManagerMockRecorder) WatchEvents(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchEvents", reflect.TypeOf((*MockUpdateManager)(nil).WatchEvents), ctx)
}
