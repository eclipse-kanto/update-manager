// Copyright (c) 2023 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: update_agent_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	api "github.com/eclipse-kanto/update-manager/api"
	gomock "github.com/golang/mock/gomock"
)

// MockUpdateAgentClient is a mock of UpdateAgentClient interface.
type MockUpdateAgentClient struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateAgentClientMockRecorder
}

// MockUpdateAgentClientMockRecorder is the mock recorder for MockUpdateAgentClient.
type MockUpdateAgentClientMockRecorder struct {
	mock *MockUpdateAgentClient
}

// NewMockUpdateAgentClient creates a new mock instance.
func NewMockUpdateAgentClient(ctrl *gomock.Controller) *MockUpdateAgentClient {
	mock := &MockUpdateAgentClient{ctrl: ctrl}
	mock.recorder = &MockUpdateAgentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateAgentClient) EXPECT() *MockUpdateAgentClientMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockUpdateAgentClient) Connect(arg0 api.UpdateAgentHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockUpdateAgentClientMockRecorder) Connect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockUpdateAgentClient)(nil).Connect), arg0)
}

// Disconnect mocks base method.
func (m *MockUpdateAgentClient) Disconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockUpdateAgentClientMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockUpdateAgentClient)(nil).Disconnect))
}

// PublishCurrentState mocks base method.
func (m *MockUpdateAgentClient) PublishCurrentState(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishCurrentState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishCurrentState indicates an expected call of PublishCurrentState.
func (mr *MockUpdateAgentClientMockRecorder) PublishCurrentState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishCurrentState", reflect.TypeOf((*MockUpdateAgentClient)(nil).PublishCurrentState), arg0)
}

// PublishDesiredStateFeedback mocks base method.
func (m *MockUpdateAgentClient) PublishDesiredStateFeedback(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishDesiredStateFeedback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishDesiredStateFeedback indicates an expected call of PublishDesiredStateFeedback.
func (mr *MockUpdateAgentClientMockRecorder) PublishDesiredStateFeedback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishDesiredStateFeedback", reflect.TypeOf((*MockUpdateAgentClient)(nil).PublishDesiredStateFeedback), arg0)
}

func (m *MockUpdateAgentClient) Domain() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Domain")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockUpdateAgentClientMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domain", reflect.TypeOf((*MockUpdateAgentClient)(nil).Domain))
}
