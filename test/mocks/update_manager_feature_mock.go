// Copyright (c) 2023 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: ./things/update_manager_feature.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/eclipse-kanto/update-manager/api/types"
	gomock "github.com/golang/mock/gomock"
)

// MockUpdateManagerFeature is a mock of UpdateManagerFeature interface.
type MockUpdateManagerFeature struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateManagerFeatureMockRecorder
}

// MockUpdateManagerFeatureMockRecorder is the mock recorder for MockUpdateManagerFeature.
type MockUpdateManagerFeatureMockRecorder struct {
	mock *MockUpdateManagerFeature
}

// NewMockUpdateManagerFeature creates a new mock instance.
func NewMockUpdateManagerFeature(ctrl *gomock.Controller) *MockUpdateManagerFeature {
	mock := &MockUpdateManagerFeature{ctrl: ctrl}
	mock.recorder = &MockUpdateManagerFeatureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateManagerFeature) EXPECT() *MockUpdateManagerFeatureMockRecorder {
	return m.recorder
}

// Activate mocks base method.
func (m *MockUpdateManagerFeature) Activate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Activate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Activate indicates an expected call of Activate.
func (mr *MockUpdateManagerFeatureMockRecorder) Activate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activate", reflect.TypeOf((*MockUpdateManagerFeature)(nil).Activate))
}

// Deactivate mocks base method.
func (m *MockUpdateManagerFeature) Deactivate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Deactivate")
}

// Deactivate indicates an expected call of Deactivate.
func (mr *MockUpdateManagerFeatureMockRecorder) Deactivate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deactivate", reflect.TypeOf((*MockUpdateManagerFeature)(nil).Deactivate))
}

// SendDesiredStateFeedback mocks base method.
func (m *MockUpdateManagerFeature) SendDesiredStateFeedback(envelope *types.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDesiredStateFeedback", envelope)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDesiredStateFeedback indicates an expected call of SendDesiredStateFeedback.
func (mr *MockUpdateManagerFeatureMockRecorder) SendDesiredStateFeedback(envelope interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDesiredStateFeedback", reflect.TypeOf((*MockUpdateManagerFeature)(nil).SendDesiredStateFeedback), envelope)
}

// SetCurrentState mocks base method.
func (m *MockUpdateManagerFeature) SetCurrentState(envelope *types.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrentState", envelope)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCurrentState indicates an expected call of SetCurrentState.
func (mr *MockUpdateManagerFeatureMockRecorder) SetCurrentState(envelope interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentState", reflect.TypeOf((*MockUpdateManagerFeature)(nil).SetCurrentState), envelope)
}
