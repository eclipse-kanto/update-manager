// Copyright (c) 2023 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: update_agent_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUpdateAgentHandler is a mock of UpdateAgentHandler interface.
type MockUpdateAgentHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateAgentHandlerMockRecorder
}

// MockUpdateAgentHandlerMockRecorder is the mock recorder for MockUpdateAgentHandler.
type MockUpdateAgentHandlerMockRecorder struct {
	mock *MockUpdateAgentHandler
}

// NewMockUpdateAgentHandler creates a new mock instance.
func NewMockUpdateAgentHandler(ctrl *gomock.Controller) *MockUpdateAgentHandler {
	mock := &MockUpdateAgentHandler{ctrl: ctrl}
	mock.recorder = &MockUpdateAgentHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateAgentHandler) EXPECT() *MockUpdateAgentHandlerMockRecorder {
	return m.recorder
}

// GetCurrentState mocks base method.
func (m *MockUpdateAgentHandler) GetCurrentState(arg0 context.Context, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentState", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentState indicates an expected call of GetCurrentState.
func (mr *MockUpdateAgentHandlerMockRecorder) GetCurrentState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentState", reflect.TypeOf((*MockUpdateAgentHandler)(nil).GetCurrentState), arg0, arg1)
}

// HandleCurrentStateGet mocks base method.
func (m *MockUpdateAgentHandler) HandleCurrentStateGet(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCurrentStateGet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleCurrentStateGet indicates an expected call of HandleCurrentStateGet.
func (mr *MockUpdateAgentHandlerMockRecorder) HandleCurrentStateGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCurrentStateGet", reflect.TypeOf((*MockUpdateAgentHandler)(nil).HandleCurrentStateGet), arg0)
}

// HandleDesiredState mocks base method.
func (m *MockUpdateAgentHandler) HandleDesiredState(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDesiredState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleDesiredState indicates an expected call of HandleDesiredState.
func (mr *MockUpdateAgentHandlerMockRecorder) HandleDesiredState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDesiredState", reflect.TypeOf((*MockUpdateAgentHandler)(nil).HandleDesiredState), arg0)
}

// HandleDesiredStateCommand mocks base method.
func (m *MockUpdateAgentHandler) HandleDesiredStateCommand(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDesiredStateCommand", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleDesiredStateCommand indicates an expected call of HandleDesiredStateCommand.
func (mr *MockUpdateAgentHandlerMockRecorder) HandleDesiredStateCommand(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDesiredStateCommand", reflect.TypeOf((*MockUpdateAgentHandler)(nil).HandleDesiredStateCommand), arg0)
}
