// Copyright (c) 2023 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: reboot.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRebootManager is a mock of RebootManager interface.
type MockRebootManager struct {
	ctrl     *gomock.Controller
	recorder *MockRebootManagerMockRecorder
}

// MockRebootManagerMockRecorder is the mock recorder for MockRebootManager.
type MockRebootManagerMockRecorder struct {
	mock *MockRebootManager
}

// NewMockRebootManager creates a new mock instance.
func NewMockRebootManager(ctrl *gomock.Controller) *MockRebootManager {
	mock := &MockRebootManager{ctrl: ctrl}
	mock.recorder = &MockRebootManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRebootManager) EXPECT() *MockRebootManagerMockRecorder {
	return m.recorder
}

// Reboot mocks base method.
func (m *MockRebootManager) Reboot(arg0 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reboot", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reboot indicates an expected call of Reboot.
func (mr *MockRebootManagerMockRecorder) Reboot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reboot", reflect.TypeOf((*MockRebootManager)(nil).Reboot), arg0)
}
