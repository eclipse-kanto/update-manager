// Copyright (c) 2023 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: update_manager_callback.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/eclipse-kanto/update-manager/api/types"
	gomock "github.com/golang/mock/gomock"
)

// MockUpdateManagerCallback is a mock of UpdateManagerCallback interface.
type MockUpdateManagerCallback struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateManagerCallbackMockRecorder
}

// MockUpdateManagerCallbackMockRecorder is the mock recorder for MockUpdateManagerCallback.
type MockUpdateManagerCallbackMockRecorder struct {
	mock *MockUpdateManagerCallback
}

// NewMockUpdateManagerCallback creates a new mock instance.
func NewMockUpdateManagerCallback(ctrl *gomock.Controller) *MockUpdateManagerCallback {
	mock := &MockUpdateManagerCallback{ctrl: ctrl}
	mock.recorder = &MockUpdateManagerCallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateManagerCallback) EXPECT() *MockUpdateManagerCallbackMockRecorder {
	return m.recorder
}

// HandleCurrentStateEvent mocks base method.
func (m *MockUpdateManagerCallback) HandleCurrentStateEvent(name string, activityID string, currentState *types.Inventory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleCurrentStateEvent", name, activityID, currentState)
}

// HandleCurrentStateEvent indicates an expected call of HandleCurrentStateEvent.
func (mr *MockUpdateManagerCallbackMockRecorder) HandleCurrentStateEvent(name, activityID, currentState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCurrentStateEvent", reflect.TypeOf((*MockUpdateManagerCallback)(nil).HandleCurrentStateEvent), name, activityID, currentState)
}

// HandleDesiredStateFeedbackEvent mocks base method.
func (m *MockUpdateManagerCallback) HandleDesiredStateFeedbackEvent(name, activityID, baseline string, status types.StatusType, message string, actions []*types.Action) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleDesiredStateFeedbackEvent", name, activityID, baseline, status, message, actions)
}

// HandleDesiredStateFeedbackEvent indicates an expected call of HandleDesiredStateFeedbackEvent.
func (mr *MockUpdateManagerCallbackMockRecorder) HandleDesiredStateFeedbackEvent(name, activityID, baseline, status, message, actions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDesiredStateFeedbackEvent", reflect.TypeOf((*MockUpdateManagerCallback)(nil).HandleDesiredStateFeedbackEvent), name, activityID, baseline, status, message, actions)
}
